class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        // Get the lengths of the input arrays
        int m = nums1.length;
        int n = nums2.length;

        // Initialize variables for the result, visited pairs, and minHeap
        List<List<Integer>> ans = new ArrayList<>(); // Result list of lists
        Set<Pair<Integer, Integer>> visited = new HashSet<>(); // Set to track visited pairs
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> (a[0] - b[0])); // Min-Heap for storing pairs

        // Add the first pair (smallest sum) to the minHeap and visited set
        minHeap.offer(new int[]{nums1[0] + nums2[0], 0, 0});
        visited.add(new Pair<Integer, Integer>(0, 0));

        // Process the k smallest pairs
        while (k-- > 0 && !minHeap.isEmpty()) {
            int[] top = minHeap.poll(); // Extract the smallest sum pair from minHeap
            int i = top[1]; // Get the index of the pair in nums1
            int j = top[2]; // Get the index of the pair in nums2

            ans.add(List.of(nums1[i], nums2[j])); // Add the pair to the result list

            // Check the pairs in the right and bottom directions of the current pair
            // If not visited, add them to minHeap and mark them as visited
            if (i + 1 < m && !visited.contains(new Pair<Integer, Integer>(i + 1, j))) {
                minHeap.offer(new int[]{nums1[i + 1] + nums2[j], i + 1, j});
                visited.add(new Pair<Integer, Integer>(i + 1, j));
            }
            if (j + 1 < n && !visited.contains(new Pair<Integer, Integer>(i, j + 1))) {
                minHeap.offer(new int[]{nums1[i] + nums2[j + 1], i, j + 1});
                visited.add(new Pair<Integer, Integer>(i, j + 1));
            }
        }

        return ans; // Return the k smallest pairs
    }
}
