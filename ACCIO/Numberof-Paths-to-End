// Approach
// We will solve this problem using dynamic programming. We will create an array of size n. Each element in the array would tell us the total number of moves from that position to the end of the array. We will start filling the array from the end to the start. For every element of the array we just need to add arr[i] elements ahead of it. Finally the first element of the array would be our answer.

// Time Complexity

// O(N^2)

// Space Complexity

// O(N)

// Below is the implementation of above idea:

// 1. Java

import java.io.*;
import java.util.*;

public class Main {

   public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      int[] arr = new int[n];
      for (int i = 0; i < arr.length; i++) {
         arr[i] = sc.nextInt();
      }

      Solution ob =new Solution();

      System.out.println(ob.alljump(arr,n));
   }

}

class Solution{
    public int alljump(int arr[],int n){
      int[] dp = new int[n + 1];
      dp[n] = 1;

      for (int i = n - 1; i >= 0; i--) {
         if (arr[i] > 0) {
            for (int j = 1; j <= arr[i] && i + j < dp.length; j++) {
               dp[i] += dp[i + j];
            }
         }
      }
      return dp[0];  
    }
}