// Approach 1
// Sort the arrays in ascending order
// Use two pointers and check if the difference is <= 1. If yes then count+=1
// Other wise increment the pointer of that array which has the current element smaller.
// Time Complexity

// O(nlogn)

// Space Complexity

// O(1)

// 1. Java

import java.util.*;

class Solution {
    public int maxPairs(int[] boys, int[] girls) {
        Arrays.sort(boys);
        Arrays.sort(girls);
        int i = 0, j = 0, count = 0;
        while (i < boys.length && j < girls.length) {
            if (Math.abs(boys[i] - girls[j]) <= 1) {
                i++;
                j++;
                count++;
            } else if (boys[i] < girls[j]) {
                i++;
            } else {
                j++;
            }
        }
        return count;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        int m = sc.nextInt();
        int b[] = new int[n];
        for (int i = 0; i < m; i++)
            b[i] = sc.nextInt();
        Solution obj = new Solution();
        System.out.println(obj.maxPairs(a, b));
        sc.close();
    }
}