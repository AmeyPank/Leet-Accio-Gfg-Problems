// Approach 1: Brute Force
// We try all possible combinations of subsets and print true if we find a set with sum that is half of the total, else we print false.

// Time Complexity

// O(2^N)

// Space Complexity

// O(1)

// Approach 2: Dynamic Programming
// We can use dynamic programming to solve this problem. We can use a 2D array dp[][] to store the results of all the subproblems. dp[i][j] stores the minimum sum difference between the two subsets formed from the first i elements of the array, such that the first subset has a sum equal to j. We can use the following recurrence to fill the dp[][] array:

// dp[i][j] = min(dp[i-1][j], dp[i-1][j-arr[i-1]])

// We print true if a subset with its sum equal to half of the array's total sum is possible, else we print false.

// Time Complexity

// O(N*sum)

// Space Complexity

// O(N*sum)

// Below is the implementation of the above approach:

// 1. Java

import java.io.*;
import java.util.*;


public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
            }
            Solution s = new Solution();
            System.out.println(s.twoEqualSubsets(arr));
        }
        
    }
}

class Solution {
    static String twoEqualSubsets(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        int n = arr.length;
        boolean[][] dp = new boolean[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (arr[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - arr[i - 1]] || dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        if (sum % 2 == 0 && dp[n][sum / 2]) {
            return "true";
        }
        return "false";
    }
}